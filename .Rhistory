train <- read.csv("DigitRecognizer/train.csv")
test <- read.csv("DigitRecognizer/test.csv")
sample_submission <- read.csv("DigitRecognizer/sample_submission.csv")
str(train)
class(train)
source('~/GitHub/Kaggle/DigitRecognizer/digit1.R', echo=TRUE)
dim(train)
head(names(train))
tail(names(train))
table(train$label)
table(train$pixel500)
train %>% names
remove.packages("sFFLHD", lib="~/R/win-library/3.3")
install.packages("sFFLHD")
s <- sFFLHD$new(D=2,L=3)
library(sFFLHD)
s <- sFFLHD$new(D=2,L=3)
s$get.batch()
s$get.batch()
s$get.batch()
s$get.batch()
s$get.batch()
s$get.batch()
s$get.batch()
mat <- matrix(1:12, ncol=2)
split_matrix(mat, 4, shuffle=FALSE)
split_matrix(mat, 4, shuffle=TRUE)
split_matrix(mat, nsplits=4, shuffle=FALSE)
mat
split_matrix(mat, nsplits=2, shuffle=F)
split_matrix(mat, 3, shuffle=F)
train <- read.csv("DigitRecognizer/train.csv")
test <- read.csv("DigitRecognizer/test.csv")
sample_submission <- read.csv("DigitRecognizer/sample_submission.csv")
class(train)
dim(train)
head(names(train))
tail(names(train))
table(train$label)
table(train$pixel500)
head(names(train))
fit <- lm(label ~ ., train)
pred <- predict(fit, test)
str(pred)
dim(test)
head(names(test))
train_ind <- sample(1:nrow(trainALL), size = .7*nrow(trainALL), replace = F)
trainALL <- read.csv("DigitRecognizer/train.csv")
train_ind <- sample(1:nrow(trainALL), size = .7*nrow(trainALL), replace = F)
train <- trainALL[train_ind,]
test <- trainALL[-train_ind,]
fit <- lm(label ~ ., train)
pred <- predict(fit, test)
table(pred, test$label)
str(pred)
head(train$label)
round(2.6)
round(2.4)
pred <- round(predict(fit, test))
table(pred, test$label)
pred[pred < 0] <- 0
pred[pred > 9] <- 9
table(pred, test$label)
sum(pred == test$label) / length(pred)
fitlog <- glm(label~., family=binomial(link='logit'), data=train)
library(nnet)
fitlog <- multinom(label ~ ., data=train)
str(fitlog)
fitlog <- multinom(label ~ ., data=train[1:1000,])
fitlog <- multinom(as.factor(label) ~ ., data=train[1:1000,])
MASS::birthwt
MASS::birthwt %>% head
library(magrittr)
MASS::birthwt %>% head
MASS::birthwt$low
fitlog <- multinom(factor(label) ~ ., data=train[1:1000,])
fitlog <- multinom(factor(label) ~ ., data=train[1:1000,], maxNWts=1e6)
fitlog <- multinom(factor(label) ~ ., data=train[1:1000,], MaxNWts=1e6)
str(fitlog)
predlog <- predict(fitlog, test)
predlog[predlog < 0] <- 0
predlog[predlog > 9] <- 9
str(predlog)
table(predlog, test$label)
sum(predlog == test$label) / length(predlog) # 23.5% accurate
fitlog <- multinom(factor(label) ~ ., data=train, MaxNWts=1e6)
rm(fit);rm(trainALL);rm(sample_submission)
predlog <- predict(fitlog, test)
table(predlog, test$label)
sum(predlog == test$label) / length(predlog)
fitnet <- nnet(factor(label) ~ ., data=train, MaxNWts=1e6, maxit=200)
fitnet <- nnet(factor(label) ~ ., data=train, MaxNWts=1e6, maxit=200,size=20)
str(fitnet)
prednet <- predict(fitnet, test)
table(predlog, test$label)
sum(predlog == test$label) / length(predlog)
table(prednet, test$label)
str(prednet)
prednet2 <- apply(prednet, 1, which.max)
str(prednet2)
prednet[1:4,]
prednet2 <- apply(prednet, 1, which.max) - 1
table(prednet2, test$label)
sum(prednet2 == test$label) / length(prednet2)
memory.size(train)
memory.size(fitnet)
trainALL <- read.csv("DigitRecognizer/train.csv")
train_ind <- sample(1:nrow(trainALL), size = .7*nrow(trainALL), replace = F)
train <- trainALL[train_ind,]
rm(train)
library(nnet)
fitlog <- multinom(factor(label) ~ ., data=trainALL, MaxNWts=1e6, maxit=200)
predlog <- predict(fitlog, testALL)
testALL <- read.csv("DigitRecognizer/test.csv")
sample_submission <- read.csv("DigitRecognizer/sample_submission.csv")
predlog <- predict(fitlog, testALL)
head(predlog)
head(sample_submission)
outDF <- data.frame(ImageId=1:length(predlog), Label=predlog)
head(outDF)
write.csv(x=outDF, file="multinomALL.csv")
str(outDF)
table(outDF$Label)
head(read.csv('DigitRecognizer/multinomSUBMISSION.csv'))
write.csv(x=outDF, file="multinomALL.csv", row.names = F)
head(read.csv('DigitRecognizer/multinomSUBMISSION.csv'))
head(read.csv('DigitRecognizer/multinomSUBMISSION.csv'))
write.csv(x=outDF, file="DigitRecognizer/multinomALL.csv", row.names = F)
head(read.csv('DigitRecognizer/multinomSUBMISSION.csv'))
write.csv(x=outDF, file="DigitRecognizer/multinomSUBMISSION.csv", row.names = F)
head(read.csv("DigitRecognizer/multinomSUBMISSION.csv"))
trainALL <- read.csv("DigitRecognizer/train.csv")
train_ind <- sample(1:nrow(trainALL), size = .7*nrow(trainALL), replace = F)
train <- trainALL[train_ind,]
test <- trainALL[-train_ind,]
install.packages("e1071")
library(e1071)
svm.model <- svm(factor(label) ~ ., data=train)
timestamp()
##------ Fri Oct 07 23:05:48 2016 ------##
train %>% names %>% head
library(magrittr)
train %>% names %>% head
svm.model <- svm(factor(label) ~ ., data=train[1:100,1:3])
svm.model <- svm(factor(label) ~ ., data=train[sample(1:nrow(train),size=100),1:3])
train[sample(1:nrow(train),size=100),1:3]
all.equal(train[,2])
all.equal(0,train[,2])
all(train[,2] == train[1,2])
all(train[,12] == train[2,12])
all(train[,13] == train[2,13])
all(train[,100] == train[2,100])
table(train[,12])
table(train[,100])
use_cols <- apply(train[,2:ncol(train)], 2, function(x){all(x==x[0])})
use_cols %>% str
use_cols <- c(T, apply(train[,2:ncol(train)], 2, function(x){!all(x==x[0])}))
use_cols %>% str
table(use_cols)
use_cols <- c(T, apply(train[,2:ncol(train)], 2, function(x){!all(x==x[0])}))
table(use_cols)
use_cols <- apply(train[,2:ncol(train)], 2, function(x){!all(x==x[0])})
table(use_cols)
use_cols <- apply(train[,2:ncol(train)], 2, function(xx){!all(xx==xx[0])})
table(use_cols)
table(train[,3])
ncol(train)
xx[,3]==x[1,3] %>% all
train[,3]==train[1,3] %>% all
all(train[,3]==train[1,3])
train[,3]==train[1,3] %>% str
table(train[,3])
table(test[,3])
use_cols <- apply(train, 2, function(xx){!all(xx==xx[0])})
table(use_cols)
apply(train, 2, function(xx){!all(xx==xx[0])}) %>% table
apply(train, 2, function(xx){xx-xx[0]}) %>% table
apply(train, 2, function(xx){xx[0]}) %>% table
apply(train, 2, function(xx){xx[0]})
class(train)
sapply(train, function(xx){xx[0]})
sapply(train, function(xx){xx[1]})
sapply(train, function(xx){sum(xx==xx[1])})
sapply(train, function(xx){sum(xx==xx[1])}) %>% table
sapply(train, function(xx){all(xx==xx[1])}) %>% table
sapply(train, function(xx){!all(xx==xx[1])}) %>% table
use_cols <- sapply(train, function(xx){!all(xx==xx[1])})
use_cols <- which(sapply(train, function(xx){!all(xx==xx[1])}))
use_cols %>% head
svm.model <- svm(factor(label) ~ ., data=train[1:100, use_cols[1:4]])
table(train[,13])
table(train[,34])
table(train[,33])
table(train[,34]==train[1,34])
table(train[,3]==train[1,3])
table(train[,300]==train[1,300])
use_cols %>% head(20)
table(train[,32]==train[1,32])
all(train[,32]==train[1,32])
!all(train[,32]==train[1,32])
use_cols <- which(sapply(train, function(xx){!all(xx==xx[1])}))
use_cols %>% head(20)
which(apply(as.matrix(train),2, function(xx){!all(xx==xx[1])})) %>% head
table(train$pixel12)
table(train[,13])
train %>% names %>% head(20)
table(train[,14])
use_cols <- which(sapply(train, function(xx){sum(xx==xx[1])/length(xx)<.1}))
use_cols %>% head(10)
use_cols <- which(sapply(train, function(xx){sum(xx==xx[1])/length(xx)<.1}))
library(e1071)
svm.model <- svm(factor(label) ~ ., data=train[1:100, use_cols[1:4]])
svm.pred <- predict(svm.model, test)
svm.pred
svm.model <- svm(factor(label) ~ ., data=train[1:1000, use_cols[1:4]])
svm.model <- svm(factor(label) ~ ., data=train[1:1000, use_cols[1:40]])
svm.model <- svm(factor(label) ~ ., data=train[1:1000, use_cols])
svm.model <- svm(factor(label) ~ ., data=train[1:10000, use_cols])
svm.model <- svm(factor(label) ~ ., data=train[, use_cols])
svm.pred <- predict(svm.model, test)
svm.pred %>% str
table(svm.pred, test$label)
sum(svm.pred == test$label) / nrow(test)
rm(test)
rm(train)
rm(train);rm(test) # to make sure I don't use these
rm(train);rm(test);rm(use_cols);rm(svm.model);rm(svm.pred) # to make sure I don't use these
use_cols <- which(sapply(trainALL, function(xx){sum(xx==xx[1])/length(xx)<.1}))
svm.model <- svm(factor(label) ~ ., data=trainALL[, use_cols])
head(use_cols)
trainALL$label %>% table
use_cols <- which(sapply(trainALL, function(xx){sum(xx==xx[1])/length(xx)<.01}))
svm.model <- svm(factor(label) ~ ., data=trainALL[, use_cols])
head(use_cols)
train <- trainALL[train_ind,]
test <- trainALL[-train_ind,]
use_cols <- which(sapply(train, function(xx){sum(xx==xx[1])/length(xx)<.9})) #.1 too big, label might not get included
svm.model <- svm(factor(label) ~ ., data=train[, use_cols]) # takes a couple minutes
timestamp()
##------ Sat Oct 08 08:39:47 2016 ------##
svm.pred <- predict(svm.model, test)
svm.pred %>% str
table(svm.pred, test$label)
sum(svm.pred == test$label) / nrow(test)
rm(train);rm(test);rm(use_cols);rm(svm.model);rm(svm.pred) # to make sure I don't use these
use_cols <- which(sapply(trainALL, function(xx){sum(xx==xx[1])/length(xx)<.9}))
timestamp()
##------ Sat Oct 08 08:40:48 2016 ------##
svm.model <- svm(factor(label) ~ ., data=trainALL[, use_cols])
svm.pred <- predict(svm.model, testALL)
svm.pred %>% str
table(svm.pred, testALL$label)
sum(svm.pred == test$label) / nrow(test)
timestamp()
##------ Sat Oct 08 08:51:57 2016 ------##
testALL <- read.csv("DigitRecognizer/test.csv")
svm.pred <- predict(svm.model, testALL)
svm.pred %>% str
table(svm.pred)#, testALL$label)
outDF <- data.frame(ImageId=1:length(svm.pred), Label=svm.pred)
write.csv(x=outDF, file="DigitRecognizer/svmSUBMISSION.csv", row.names = F)
head(read.csv("DigitRecognizer/svmSUBMISSION.csv"))
str(read.csv("DigitRecognizer/svmSUBMISSION.csv"))
